Welcome to the Comprehensive Manual of C Language! Whether you're a beginner stepping into the world of programming or an experienced coder familiar with other languages, this manual is designed to equip you with the essential skills and knowledge to master the C programming language.

This manual in the the form of synthetic charts, with examples that encompass main situations leading its readers to a ready to go ability to code. Also, it includes exercises and a reference index of essential reserved words (keywords that we will learn later) in the annexes.

##############################################################################################################################

* Why Learn C?

C is often regarded as the "primitive sea of all programming languages", giving birth to C++, Java, and Python... Unlike high-level languages that offer abstraction from the hardware, C operates closer to the hardware, making it a low-level language. This proximity allows C programmers to have greater control over memory allocation and the ability to interact directly with hardware resources, resulting in more efficient and powerful programming.

Moreover, C is widely used in operating system development due to its ability to interact closely with hardware and manage system resources efficiently. Operating systems, being the bridge between hardware and software, rely heavily on C's features for tasks such as memory management, process scheduling, and device control.

Therefore, learning C not only provides a solid foundation for understanding how computers operate at a fundamental level but also equips programmers with the skills to write efficient and powerful code as drivers, making it an indispensable language in various domains of software development.
------------------------------------------------------------------------------------------------------------------------------

* What is a compiler, and how to use it?

If C allow us to give or receive more naturally instruction to the computer/programs, a compiler act as a translator to make the coding language intelligible to the machine. 

A compiler is a software tool that translates high-level programming languages into machine-readable code, typically in the form of executable files or intermediate code.

GCC (GNU Compiler Collection) is one of the most widely used compilers for C and other programming languages. It is open-source and available for various operating systems, including Windows, macOS, and Linux.

Here's how to use GCC to compile a C program on different operating systems:

Windows: gcc my_program.c -o my_program.exe
This command compiles my_program.c and generates an executable file named my_program.exe.

macOS: gcc my_program.c -o my_program
GCC is usually pre-installed on macOS. You can open the Terminal and navigate to the directory containing your C source code, that is to say the my_program.c file. This command compiles my_program.c and generates an executable file named my_program.

Linux (The best OS, yes I love Linux): gcc my_program.c -o my_program
In all cases, -o option is used to specify the name of the output executable file. If not provided, GCC generates an executable file named a.out by default.

Once the program is compiled, you can run the executable file to execute the program on your operating system. For example, on Windows, you would run my_program.exe, and on macOS or Linux, you would run ./my_program.
------------------------------------------------------------------------------------------------------------------------------

* Main Features of C:


- Syntax Simplicity (C is close to natural language)
It refers to the rules and structure governing how code is written and formatted. It determines the correct arrangement of symbols, keywords, and punctuation marks to form valid and working code. 
EX: Code to print Hello Everyone !!! 
  
#include <stdio.h>
int main() {
    printf("Hello Everyone !!!");
    return 0;
}

- Portability
C programs can be easily ported across different platforms with minimal modifications, making it an ideal choice for writing system-level software.

- Efficiency, Modularity, and Extensibility
C offers low-level memory manipulation capabilities, allowing for precise control over system resources and optimal performance. It also supports modular programming through functions and libraries, facilitating code reuse and maintainability.
------------------------------------------------------------------------------------------------------------------------------

* C Language Essentials 1: The Reserved words

C as all the coding language, by opposition to binary (LOL), use keywords to send/receive instructions to the hardware/software. Reserved words are predefined identifiers that have special meanings and are reserved by the language for specific purposes. These words cannot be used as identifiers (such as variable names or function names) by programmers because they are already used by the language itself. 

Here's an example of reserved words in Code to print Hello Everyone: 
1. #include <stdio.h>
2. int main() {
3. printf("Hello Everyone !!!");
4. return 0;
5. }

In the line 1, the keyword is #include. It is  is a pre-processor directive in C that includes the contents of a header file in the program (stdio.h in this case, don't mind this for the moment, it is used to make declarations and definitions available from the standard input/output library).

In the line 2, the keyword is int. This is a keyword in C used to declare integer data types, that is to say variables where we can stock data as a number (for example int a = 5). In this context, it's used to specify the result (return) type of the main function of the program, which is an integer, that is to say a whole number that can be either positive, negative, or zero.

Still in line 2, the keyword is main. This is a special function in C that serves as the entry point of the program, the execution of the program begins from the main function.. It must be defined in every C program, (Some compiler will require int main, others won't, being satisfied by main without int before...).

In the line 3, the keyword is printf: This is a function provided by the standard input/output library in C. It is used to print formatted output to the standard output (usually the console).

In the line 4, the keyword is return: This is a keyword in C used to return a value from a function (also no necessary in some compilers). In the main function, it's used to return an exit status to the operating system, indicating the success or failure of the program execution.
------------------------------------------------------------------------------------------------------------------------------

* C Language Essentials 2: Other Elements of the Syntax 

C have some other elements fundamental for its syntax:

- Case Sensitivity: C is case-sensitive, meaning uppercase and lowercase letters are treated as distinct. For example, Main, main, and MAIN would be interpreted as different identifiers.

- Semicolons: In C, statements are terminated by semicolons (;). Omitting a semicolon at the end of a statement is like a "crime" when coding in C, the code will fail without these fancy semicolons.

- Whitespace: Spaces, tabs, and newlines are collectively known as whitespace and are generally used to improve code readability. In C, whitespace is typically ignored: a + b and a+b are equivalent.

- Comments: Comments are used to add explanatory notes within the code. In C, comments can be written in two forms:
Single-line comments: Begin with // and extend to the end of the line.
Multi-line comments: Enclosed between /* and */ and can span multiple lines.
EX: Updated Code to print Hello Everyone !!! 
1. // This is a single line comment, you cant use the line 2 to pursue your explanatory notes
2. #include <stdio.h>
3. int main() {
4. /* This is a multi line comment. Please use as many explanatory notes as you can, and organise them well 
5. Otherwise, guys who'll read your code will be sad, and angry. */ 
6. printf("Hello Everyone !!!");
7. return 0;
8.}

- Identifiers: They are user-defined names used to represent variables, functions, and other entities in the program. Identifiers must follow specific rules:
A. Must begin with a letter (either uppercase or lowercase) or an underscore (_).
B. Subsequent characters can be letters, digits, or underscores.
C. Cannot be a keyword or contain spaces or special characters.

- Operators: Operators are symbols used to perform operations on operands. C supports various types of operators, including arithmetic, relational, logical, assignment, etc. For example, +, -, *, / are arithmetic operators.
	Don't mind this: Just for good measure, there are also six operators for bit manipulation ( for char, short, int, and long, whether signed or unsigned). They are: & (bitwise AND), | (bitwise inclusive OR), ^ (bitwise exclusive OR), << (left shift), >> (right shift), ~ (one's complement said unary).

- Control Structures: Control structures dictate the flow of execution in a program. Common control structures in C include if-else, switch, for, while, and do-while statements.

- Function Declarations: They are blocks of code that perform a specific task. Function declarations specify the function's return type, name, and possible parameters. The syntax for function declaration is return_type function_name(parameters);.

- Arrays: They are used to store multiple values of the same data type in contiguous memory locations. The syntax for array declaration is datatype array_name[size];.

- Escape Sequences: They are used to represent special characters within strings: \a for the alert (bell) character, \\ for the backslash, \b for backspace, \? for the question mark, \f for form feed, \' for single quote, \n for newline, \" for double quote, \r for carriage return, \ooo for an octal number where ooo represents octal digits, \t for horizontal tab, \xhh for a hexadecimal number where hh represents hexadecimal digits, and \v for vertical tab. 

##############################################################################################################################

* Variables and Arithmetic Expressions

Variables are used to store and manipulate data, there are specific data types. They are named memory locations that can store data., and must be declared with a specific data type before they can be used. There are integers, floating-point numbers, characters, and other variable types.
EX:

int a;            // Integer variable 
float b;          // Floating-point variable 
char c;           // Character variable 

Arithmetic expressions are operands and operators that perform arithmetic calculations. Operands are variables, constants, or values used to do arithmetic operations. Operators are symbols that specify the operation to be performed, + (for addition), - (for subtraction), * (for multiplication), / (for division), and % (for modulus).
EX:

int a = 10, b = 5;
int sum = a + b;        // Addition
int difference = a - b; // Subtraction
int product = a * b;    // Multiplication
int quotient = a / b;   // Division
int remainder = a % b;  // Modulus
int result = (a + b) * (a - b);  // Arithmetic expressions can also include parentheses like in maths

* Variable Type Conversion:

EX:

Implicit Type Conversion:
int a = 5;
float b = 2.5;
float result = a + b; 
In this example, the integer variable a is implicitly converted to a float when it is added to the float variable b.

Explicit Type Conversion (Casting):
int x = 10;
int y = 3;
float division_result = (float)x / y; 

N.B.:
During type Conversion, there may be a loss of precision or unexpected behavior.

------------------------------------------------------------------------------------------------------------------------------
* The For and While statements:

Both for and while statements are control structures of loop, they are used to execute a fragment of code in loop until a defined condition is met.
The for statement is usually used when the number of iterations is known in advance or when a specific range is required. Its syntax consists of 3 parts, it is enclosed in { and separated by ; (semicolons). The first part is the initialisation, where the condition is stated. The second one is the increment part, where the condition is checked. As for the last part, the variables change until the condition is met. 
The while statement is more flexible and is used when the number of iterations is not known, or when the control of the loop is more complex. It also have the same parts; to sum up both are used for iterations in the code.

EX: Program that prints Fahrenheit-Celsius table 

1.  #include <stdio.h>
2.  int main() {
3.  float fa, cel; // You can declare several variable at once
4.  float lower, upper; 
5.  lower = 0; // You notice that the variable was declared prior to assigning it a value here
6.  upper = 200;    
7.  #define steps 10; // #define is used to declare constants    
8.  fa = lower;
9.  while (fa <= upper) {
10. // Conversion happens here
11. cel = 5.0 * (fa - 32) / 9.0;  
12. printf("%3.0f\t%6.1f\n", fa, cel); 
13. /* %d is a format specifier used to print integers
14. \t is an escape sequence used to insert a tab character in the output.
15. \n is an escape sequence used to insert a new line 
16. So this command indicate to print an integer, insert a tab, print an integer, insert a tab, than jump a line, before specifying 
17. the variables to print */ 
18. fa = fa + steps;
19. }
20. return 0;
11. }

N.B.:
%6d   print as decimal integer, at least 6 characters wide
%f    print as floating point
%6f   print as floating point, at least 6 characters wide
%.2f  print as floating point, 2 characters after decimal point
%6.2f print as floating point, at least 6 wide and 2 after decimal point, so %6.1 with 1 decimal instead of 2
%3.0f print as floating point, at least 3 wide and 0 after decimal point

------------------------------------------------------------------------------------------------------------------------------
* Character Input and Output

The standard library's input and output model is determined: text input or output, regardless of its source or destination, is treated as streams of characters. Each stream represents a sequence of characters divided into lines, where each line consists of zero or more characters followed by a newline character. 
Within the standard library, several functions facilitate reading or writing one character at a time, with getchar and putchar being the simplest. The keyword getchar retrieves the next input character from a text stream each time it's called, while putchar prints a character whenever it's invoked. 

- Character Counting and Copying

With just getchar and putchar, a program can effectively copy its input to output character by character until it encounters an end-of-file indicator. The putchar(c) function is a standard C function that is used to output a single character to the standard output (usually the terminal). The function getchar() is another standard C library function used to read a single character from the standard input (usually the keyboard) and return its ASCII value as an integer. 

Characters are stored internally as bit patterns, with the char type specifically designed for such storage. However, any integer type can serve this purpose, with int often preferred for its ability to hold both characters and the end-of-file indicator, EOF.
A concise approach to file copying can be achieved by embedding the getchar assignment within the condition of a while loop, enabling a streamlined structure for the program. Caution, ( ) are necessary for the syntax: otherwise, the code won't work.

EX: Program that counts characters in input

1.  #include <stdio.h>
2.  int main()
3.  {
4.  long nc;
5.  nc = 0;
6.  while (getchar() != EOF){
7.  ++nc; // use ++ to add 1, and -- to substract 1
8.  printf("%ld\n", nc);
9.  }
10. return 0;
11. }

N.B.:
CTRL+D send "end-of-file" (EOF) signal, you need to use this combination in the terminal after opening the program and entering data for it to run properly, and see the result. This signal, by opposition to CTRL+C that end programs and terminal process, informs instead the shell that user has no more data to input.
Caution, for non-unix that is to say for an OS different from macOS and Linux, such as evil Windows, it's not CTRL+D but CTRL+Z.

EX: Program that counts the number of lines in input

1.  #include <stdio.h>
2.  int main() {
3.  int c;
4.  int line_count = 0; 
5.  while ((c = getchar()) != EOF) {
6.  putchar(c);
7.  if (c == '\n') { // If newline character is encountered
8.  line_count++; // add 1 to  line_count variable
9.  }
10. }
11. }
12. printf("Total number of lines: %d\n", line_count);
13. return 0;           
14. }

N.B.: 
The terminal will echo what u type it's normal, we ll see later how to prevent that from happening

------------------------------------------------------------------------------------------------------------------------------
* Arrays, and Creation of Functions

An array is like one or several cells of an excel sheet, arrays are essential data structures. It allows the storage and management of multiple values of the same type under a single name, allowing efficient data grouping and manipulation.  

- Defining and Initialising Arrays

int numbers[7]; or int numbers[6] = {3, 5, 7, 11, 19, 33}; to declare while initialising, [6] = {1,2}; is possible but other elements will be set to 0. Matrix are possible, with int matrix[4][4];    

EX: Program that counts the number of characters each line and print the longest

1. #include <stdio.h>
2. #define MAXLENGTH 1000
3. int fetch_line(char buffer[], int maxlength);
4. void transfer(char destination[], char source[]);
5. int main() {
6. int length;
7. int maxLength = 0;
8. char buffer[MAXLENGTH];
9. char maxBuffer[MAXLENGTH];
10. while ((length = fetch_line(buffer, MAXLENGTH)) > 0) {
11. if (length > maxLength) {
12. maxLength = length;
13. transfer(maxBuffer, buffer);
14. }
15. }
16. if (maxLength > 0)
17. printf("%s", maxBuffer);
18. return 0;
19. }
20. int fetch_line(char str[], int limit) {
21. int character, index;
22. for (index = 0; index < limit - 1 && (character = getchar()) != EOF && character != '\n'; ++index)
23. str[index] = character;
24. if (character == '\n') {
25. str[index] = character;
26. ++index;
27. }
28. str[index] = '\0';
29. return index;
30. }
31. void transfer(char destination[], char source[]) {
32. int idx = 0;
33. while ((destination[idx] = source[idx]) != '\0')
34. ++idx;
35. }

- What is a Function

It's a building block, encapsulating specific tasks to enhance code modularity and readability. 
Again, fetch_line is the function that retrieve input characters until it encounters an end-of-file (EOF) or a newline character ('\n'). Functions have parameters, fetch_line has a buffer[] (an array to store the input characters) and a limit (the maximum number of characters to read).

- Creating a Function

It is done in 5 steps: 
A- Declaration (Prototype), where is the function's name, return type, and possible parameters
B- Definition, where are the function's return type name, possible parameters, and the body of the function enclosed in {}
C- Function Body
D- Possible Return Statement (if applicable), where the value to be returned is set
E- Function Call, to use the function (not necessarily right after the previous step, but when the function is needed)

EX: Dumb Function Code that add two numbers (no need for CTR+D here)

1.  #include <stdio.h>
2.  int dumb_function(int essence1, int essence2);
3.  int main() {
4.  int essence1, essence2, outcome;
5.  scanf("%d", &essence1);
6.  scanf("%d", &essence2);
7.  outcome = dumb_function(essence1, essence2); 
8.  printf("The dumb function reveals: %d\n", outcome); 
9.  return 0;
10. }
11. int dumb_function(int essence1, int essence2) {
12. int convergence = essence1 + essence2; 
13. return convergence;
14. }

* External Variables:

- What are they?

Variables within functions are like temporary entities, because they are lost outside of their function. However, there's an alternative: external variables, defined outside any function and declared in each function that uses them. 
The process involves declaring the variables as "extern" within functions to access them. 
N.B.: You can avoid using extern, but keep in mind it needs to be done before its use, and that a well-coded program should be memory-efficient.

- How to use them?

You can use them in 3 steps: 

A- Declaration (may be in a header file, for long code, like dumb_header.h)
extern int globalVariable; 
B- Definition
int globalVariable = 10;
C- Access
void someFunction() {
printf("The value of globalVariable is: %d\n", globalVariable);
}
N.B.: When compiling your program and using a header, make sure to include it in the code, and when having multiple c files to compile all source files together (gcc -o program random_dumb_code_1.c random_dumb_code_2.c).

EX: A program with 1 c file and 1 header (to compile it, only run: gcc -o program random_dumb_code.c) 

EX_part_1: dumb_header.h
1. extern int globalVariable;

EX_part_2: random_dumb_code.c
1. #include "dumb_header.h"
2. blablabla...

EX: Program that print the longest line with an external variable, but without a header file 

1.  #include <stdio.h>
2.  #define MAXLINE 3000
3.  int maximum;
4.  char input[MAXLINE];
5.  char longest_line[MAXLINE];
6.  int read_line(void);
7.  void duplicate(void);
8.  int main() {
9.  int length;
10. maximum = 0;
11. while ((length = read_line()) > 0) {
12. if (length > maximum) {    
13. maximum = length;    
14. duplicate();    
15. }       
16. }            
17. if (maximum > 0) {            
18. printf("%s", longest_line);        
19. }    
20. return 0;    
21. }        
22. int read_line(void) {    
23. int character, index;    
24. for (index = 0; index < MAXLINE - 1 && (character = getchar()) != EOF && character != '\n'; ++index) {
25. input[index] = character;
26. }
27. if (character == '\n') {    
28. input[index] = character;    
29. ++index;        
30. }    
31. input[index] = '\0';   
32. return index;        
33. }        
34. void duplicate(void) {    
35. int index;    
36. for (index = 0; (longest_line[index] = input[index]) != '\0'; ++index) {    

##############################################################################################################################

* Conditional Expressions

A conditional expression (ternary operator) is a way to return one of 2 values depending on whether a condition is met, with a simple syntax (the_condition ? expression_1 : expression_2;). There are 2 main types of conditional expression, if-else and else-if.

- If-else

The if-else statement is an expression that determines whether a condition holds true or false, it has two blocks. If the condition is true, the code block inside the if statement is executed. Otherwise, the code block inside the else statement is executed. Its syntax is:
if (condition) {
    // Block to be executed if the condition is true
} else {
    // Block to be executed if the condition is false
}

- Else-if

Else-if ladder allows for multiple conditions to be checked in sequence, with the following syntax:
if (condition1) {
    // Block of code to be executed if condition1 is true
} else if (condition2) {
    // Block of code to be executed if condition2 is true
} else if (condition3) {
    // Block of code to be executed if condition3 is true
}
// Optionally, an else block can be added at the end to handle the case where none of the conditions are true.
else {
    // Block of code to be executed if none of the conditions are true
}

EX: Dumb code showing how if, else, and else if work

1.  #include <stdio.h>
2.  int main() {
3.  int num;
4.  printf("Enter an integer: ");
5.  scanf("%d", &num);
6.  if (num % 2 == 0) {
7.  printf("The number is even (using only if).\n");
8.  } else {
9.  printf("The number is odd (using only if).\n");
10. }
11. if (num % 2 == 0) {
12. printf("The number is divisible by 2 (using else-if).\n");
13. } else if (num % 5 == 0) {
14. printf("The number is divisible by 5 (using else-if).\n");
15. } else {
16. printf("The number is not divisible by 2 or 5 (using else-if).\n");
17. }
18. return 0;
19. }

* Operator Associativity

It determines the order in which operators of the same precedence level are evaluated, 5 + 6 - 2; means (5 + 6) - 2 while 5 + 6 * 2 means 5 + (6 * 2). Best Practices, Google-like coding requirements, are not presumptuous rules. The goal is not to be fancy, but to write good code. 
So, avoid Undefined Behavior by not changing the same variable multiple times within a single expression without a sequence point, like (,) or (;) or (&&).
And use parentheses to explicitly specify the order of evaluation when the expression might be ambiguous, better be late than sorry with thousands of lines to check. Here are some hypothetical mistakes:

- Function Calls: The compiler can choose to evaluate either foo() or bar() first, and mess with the result

int foo() {
    printf("Inside foo()\n");
    return 5;
}
int bar() {
    printf("Inside bar()\n");
    return 10;
}
int main() {
    int result = foo() + bar();
    return 0;
}
In this example, the order of evaluation of foo() and bar() is not specified.  Therefore, the output could be "Inside foo()\nInside bar()\n" or "Inside bar()\nInside foo()\n", depending on the compiler's choice.

- Logical Operators: The (&&) operator has short-circuit behavior, if (a > b) is false than (b > c) is not even tested

int a = 5, b = 10, c = 15;
int result = (a > b) && (b > c);

- Undefined Behavior: No sequence points will lead to unpredictable behavior
int x = 5;
int y = x++ * ++x;

* The Switch Statement, Break, and Continue 

- It's a testing keyword for making multi-way decisions, it does so by comparing an expression to a set of constant integer values and branching accordingly. 
When the expression matches one of these cases, the program execution starts from that point. It's important to note that all case expressions must be distinct. As for the optional default case, it's for when no other cases match the expression value. 

- The break statement is a control flow statement used to exit immediately from loops and switch statements. It is primarily used to terminate the current iteration of a loop or to exit a switch statement after a particular case has been executed.
NB: It's advisable to include a break statement after the last case, for defense.

- In a switch statement, the break statement is used to exit immediately from the switch block. This prevents the execution from falling through to the next case. If no break statement is encountered, the program will continue executing the code in the subsequent cases, leading to fall-through behavior.

- The continue statement is used inside loops to immediately jump to the next iteration of the loop without executing the remaining code in the loop's body. 
When encountered, continue causes the program execution to jump directly to the loop's condition check or increment/decrement statement (depending on the loop type), bypassing any remaining statements in the loop's body.
In a loop, continue is typically used within if statements to control the flow of execution inside the loop based on certain conditions. When a continue statement is encountered, the loop immediately proceeds to the next iteration.

EX: Dumb code to tell the name of the week day, with Monday as the first one 

1.  #include <stdio.h>
2.  int main() {
3.  int day;
4.  printf("Enter a number (1-7): ");
5.  scanf("%d", &day);
6.  switch (day) {
7.  case 1: printf("Monday\n"); break; // Here is a compact way to code putting several instruction line in one with (;)
8.  case 2: printf("Tuesday\n"); break;
9.  case 3: printf("Wednesday\n"); break;
10. case 4: printf("Thursday\n"); break;
11. case 5: printf("Friday\n"); break;
12. case 6: printf("Saturday\n"); break;w 
13. case 7: // Here is the regular way to write it
14. printf("Sunday\n"); 
15. break;
16. default: printf("Invalid input\n"); break;
17. }
18. return 0;
19. }

* The Do-While, Goto, and Labels

- Do-While is a loop that execute a block of code repeatedly, until a specified condition becomes false. It tests the condition after the loop body executes, which ensure that the loop body run at least once. Its syntax is: 
do {
    // Code block to be executed
} while (condition);

EX: Print the number i, equal to 1 at first, and adding to it 1 each time using a do-while loop until i < or = to 5

1. #include <stdio.h>
2. int main() {
3. int i = 1;
4. do {
5. printf("%d ", i);
6. i++;
7. } while (i <= 5);
8. return 0;
9. }

- Goto dates back to the old times, (when Boomers were playing in easy mode, and "nerds" coding in BASIC language). It allows to jump to a desired section of the code, without executing any previous instructions to the said desired section. It relies on labels. They are a way to name code sections easily, just by typing for instance: (dumb_section:).

EX: Same code, but jumping directly to a low-key insult (written for dramatic purposes, not directed to anyone, not even my ex)
1.  #include <stdio.h>
2.  int main() {
3.  int i = 1;
4.  goto not_today // nothing between here 
5.  do {
6.  printf("%d ", i);
7.  i++;
8.  } while (i <= 5); // and here will be ran
9.  not_today:
10. printf("Not today, punk"); 
8.  return 0;
9.  }

* Blocks, Initialisation, Recursion

- In C, you cannot nest function within other functions like in python. Yet, block-level variable scoping allow variables to be defined within blocks that is to say code enclosed within curly braces within a function. 
Variables declared within a block hide identically named variables in outer blocks, they do so by remaining in existence until the block they're defined in ends.
Good practice recommended to avoid variable names that conceal names in an outer scope, in order to prevent confusion and errors.

EX: the use of x variables in this code is just ugly
#include <stdio.h>
int x = 10; // Global variable
int main() {
    int x = 20; // Local variable, hiding the global variable 'x'
    printf("Local x: %d\n", x); // Prints the value of local 'x'
    printf("Global x: %d\n", ::x); // Prints the value of global 'x'
    return 0;
}

- In Explicit Initialisation, Variables can be initialised when they're defined by following the name with an equals sign and an expression. As for the External and static variables, they are guaranteed to be initialised to zero in the absence of explicit initialisation. Arrays and character arrays have specific initialisation rules, as seen earlier.

- Recursion is supported in C, allowing functions to call themselves either directly or indirectly. Each invocation of a recursively called function gets its own set of automatic variables. 
Recursion can provide a more compact and often easier-to-understand solution compared to non-recursive alternatives, like old-fashioned trees (or my first codes (╥﹏╥), now buried with IT game cartridges, RIP Atari).

##############################################################################################################################

------------------------------------------------------------------------------------------------------------------------------






